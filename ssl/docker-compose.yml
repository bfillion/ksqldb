version: '3.4'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-ia-broker1:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    hostname: kafka-ia-broker1
    depends_on:
      - zookeeper
    volumes:
      - ./gen-certificats/certificats:/etc/kafka/secrets
    ports:
      - "39092:39092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,SSL_HOST:SSL
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka-ia-broker1:29092,SSL_HOST://localhost:39092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: SSL
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_AUTHORIZER.CLASS.NAME: kafka.security.auth.SimpleAclAuthorizer
      KAFKA_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=(.*?),.*$$/$$1/
      KAFKA_SUPER_USERS: User:kafka-ia-broker1;User:kafka-ia-client1;User:kafka-ia-client2
      KAFKA_TOOLS_LOG4J_LOGLEVEL: WARN
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-ia-broker1.keystore.jks
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-ia.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka-ia.truststore.cred
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka-ia-broker1.keystore.cred
      KAFKA_SSL_KEY_CREDENTIALS: kafka-ia.ssl.cred
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KAFKA_LOG4J_LOGGERS: kafka.authorizer.logger=DEBUG
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # In development enviroment, auto-creating topics (and deleting them) could be convenient
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      # Eight partitions is more than enough for development
      KAFKA_NUM_PARTITIONS: 3
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-ia-broker1:29092
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SSL
      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka-ia.truststore.jks
      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_PASSWORD: soleil1234
      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-ia-broker1.keystore.jks
      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_PASSWORD: soleil1234
      CONFLUENT_METRICS_REPORTER_SSL_KEY_PASSWORD: soleil1234
      CONFLUENT_METRICS_REPORTER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:32181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.3.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - kafka-ia-broker1
      - schema-registry
      - ksqldb-server
    volumes:
      - ./gen-certificats/certificats:/etc/kafka/secrets
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka-ia-broker1:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      # CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_STREAMS_SECURITY_PROTOCOL: SSL
      CONTROL_CENTER_STREAMS_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka-ia.truststore.jks
      CONTROL_CENTER_STREAMS_SSL_TRUSTSTORE_PASSWORD: soleil1234
      CONTROL_CENTER_STREAMS_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-ia-broker1.keystore.jks
      CONTROL_CENTER_STREAMS_SSL_KEYSTORE_PASSWORD: soleil1234
      CONTROL_CENTER_STREAMS_SSL_KEY_PASSWORD: soleil1234
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.1
    depends_on:
      - zookeeper
      - kafka-ia-broker1
    volumes:
      - ./gen-certificats/certificats:/etc/kafka/secrets
    ports:
      - "32081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-ia-broker1:29092'
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:32181
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SSL
      SCHEMA_REGISTRY_KAFKASTORE_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka-ia.truststore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD: soleil1234
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-ia-broker1.keystore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD: soleil1234
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD: soleil1234

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.6.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka-ia-broker1
      - schema-registry
    volumes:
      - ./gen-certificats/certificats:/etc/kafka/secrets
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka-ia-broker1:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_PARTITIONS: "1"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: "1"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_SECURITY_PROTOCOL: SSL
      KSQL_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KSQL_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka-ia.truststore.jks
      KSQL_SSL_TRUSTSTORE_PASSWORD: soleil1234
      KSQL_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-ia-broker1.keystore.jks
      KSQL_SSL_KEYSTORE_PASSWORD: soleil1234
      KSQL_SSL_KEY_PASSWORD: soleil1234
  
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.6.0
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    volumes:
      - ./ksql:/data/scripts
    entrypoint: 
      - /bin/bash
      - -c
      - |
        echo -e "\n\n⏳ Waiting for KSQL to be available before launching CLI\n"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/info) -ne 200 ]
        do 
          echo -e $$(date) "KSQL Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088/info) " (waiting for 200)"
          sleep 5
        done
        echo -e "\n\n-> Running KSQL commands\n"
        cat /data/scripts/ksql-script.sql <(echo 'EXIT')| ksql http://ksqldb-server:8088
        echo -e "\n\n-> Sleeping…\n"
        sleep infinity

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch-platinum:6.0.0
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - "discovery.type=single-node"
      - "transport.host=127.0.0.1"
      - "xpack.security.enabled=false"
      - "ELASTIC_PASSWORD=secret"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_count", "-u", "elastic:secret"]
      interval: 10s
      timeout: 10s
      retries: 10

  kibana:
    image: docker.elastic.co/kibana/kibana:6.0.0
    depends_on:
      - elastic
    ports:
      - 5601:5601
    environment:
      - "ELASTICSEARCH_URL=http://elastic:9200"
      - "ELASTICSEARCH_PASSWORD=secret"
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:5601"]
        interval: 10s
        timeout: 10s
        retries: 10